"""
Cyclical figurate numbers
Problem 61

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
all figurate (polygonal) numbers and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	    P4,n=n**2 	  	    1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

    The set is cyclic, in that the last two digits of each number is the first
    two digits of the next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
    pentagonal (P5,44=2882), is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which
each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and
octagonal, is represented by a different number in the set.
"""

def get_with_formula(f):
    i = 1
    while len(str(f(i))) < 4:
        i += 1

    d = {}
    while len(str(f(i))) == 4:
        d[str(f(i))[:2]] = d.get(str(f(i))[:2], []) + [str(f(i))]
        i += 1

    return d

def get_triangle():
    return get_with_formula(lambda n: int(n * (n + 1) / 2))

def get_square():
    return get_with_formula(lambda n: int(n * n))

def get_pentagonal():
    return get_with_formula(lambda n: int(n * (3 * n - 1) / 2))

def get_hexagonal():
    return get_with_formula(lambda n: int(n * (2 * n - 1)))

def get_heptagonal():
    return get_with_formula(lambda n: int(n * (5 * n - 3)  / 2))

def get_octagonal():
    return get_with_formula(lambda n: int(n * (3 * n - 2)))

def find(current_sol, remaining):
    if not remaining and current_sol[-1][2:] == current_sol[0][:2]:
        print(sum(map(int, current_sol)))

    end = current_sol[-1][2:]
    for set_ in remaining:
        for number in set_.get(end, []):
            find(current_sol + [number], [x for x in remaining if x != set_])


if __name__ == '__main__':
    t = get_triangle()
    t_ = [x for key, value in t.items() for x in value]
    s = get_square()
    p = get_pentagonal()
    hx = get_hexagonal()
    hp = get_heptagonal()
    o = get_octagonal()

    for number in t_:
        find([number], [s, p, hx, hp, o])
